/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/reservables/": {
    /** Get Reservables */
    get: operations["reservation_reservables_controller_get_reservables"];
    /** Post Reservable */
    post: operations["reservation_reservables_controller_post_reservable"];
  };
  "/api/reservables/{reservable_id}/": {
    /** Get Reservable By Id */
    get: operations["reservation_reservables_controller_get_reservable_by_id"];
    /** Delete Reservable */
    delete: operations["reservation_reservables_controller_delete_reservable"];
    /** Patch Reservable */
    patch: operations["reservation_reservables_controller_patch_reservable"];
  };
  "/api/reservation/": {
    /** Get Reservation */
    get: operations["reservation_reservation_controller_get_reservation"];
    /** Post Reservation */
    post: operations["reservation_reservation_controller_post_reservation"];
  };
  "/api/reservation/me/": {
    /** Get Reservation By User */
    get: operations["reservation_reservation_controller_get_reservation_by_user"];
  };
  "/api/reservation/{reservation_id}/": {
    /** Get Reservation By Id */
    get: operations["reservation_reservation_controller_get_reservation_by_id"];
    /** Delete Reservation */
    delete: operations["reservation_reservation_controller_delete_reservation"];
  };
  "/api/auth/login/": {
    /**
     * Post Login
     * @description This is a function to login a user.
     *
     * When a user is logged in, a token is created.
     *
     * :param username: The username of the user.
     *
     * :param password: The password of the user.
     *
     * :return token: The token of the user.
     *
     * :return exp: The time when the token expires in epoch
     */
    post: operations["authentication_authsession_controller_post_login"];
  };
  "/api/auth/logout/": {
    /**
     * Post Logout
     * @description This is a function to logout a user.
     *
     * When a user is logged out all the auth sessions are deleted.
     *
     * :param token: The token of the user.
     *
     * :return: True if the user is logged out.
     */
    post: operations["authentication_authsession_controller_post_logout"];
  };
  "/api/auth/validate-session/": {
    /**
     * Post Validate Session
     * @description     Check if the session is valid using token.
     *
     *     checking will not refresh session expiry time.
     * .
     */
    get: operations["authentication_authsession_controller_post_validate_session"];
  };
  "/api/register/": {
    /**
     * Register
     * @description This is a function to register a user.
     *
     * :param username: The username of the user.
     *
     * :param password: The password of the user.
     *
     * :param email: The email of the user.
     *
     * :param first_name: The first name of the user.
     *
     * :param last_name: The last name of the user.
     *
     * :return: The user that is created.
     */
    post: operations["authentication_user_controller_register"];
  };
  "/api/me/": {
    /**
     * Me
     * @description This is a function to get the current user.
     *
     * :return: The current user.
     */
    get: operations["authentication_user_controller_me"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** ReservableSchemaOut */
    ReservableSchemaOut: {
      /** ID */
      id?: number | null;
      /** Name */
      name: string;
      /**
       * Capacity
       * @default 1
       */
      capacity?: number;
      /**
       * Location
       * @default
       */
      location?: string;
      /**
       * Description
       * @default
       */
      description?: string;
      /** Image */
      image?: string | null;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
    };
    /** ReservableSchemaIn */
    ReservableSchemaIn: {
      /** Name */
      name: string;
      /**
       * Capacity
       * @default 1
       */
      capacity?: number;
      /**
       * Location
       * @default
       */
      location?: string;
      /**
       * Description
       * @default
       */
      description?: string;
    };
    /** ReservableSchemaPatchIn */
    ReservableSchemaPatchIn: {
      /** Name */
      name: string;
      /**
       * Capacity
       * @default 1
       */
      capacity?: number;
      /**
       * Location
       * @default
       */
      location?: string;
      /**
       * Description
       * @default
       */
      description?: string;
    };
    /** ReservationSchemaOut */
    ReservationSchemaOut: {
      /** @description Reservable */
      reservable: components["schemas"]["ReservableSchemaOut"];
      /** ID */
      id?: number | null;
      /** User */
      user: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Start Time
       * Format: date-time
       */
      start_time: string;
      /**
       * End Time
       * Format: date-time
       */
      end_time: string;
    };
    /** ReservationSchemaIn */
    ReservationSchemaIn: {
      /**
       * Start Time
       * Format: date-time
       */
      start_time: string;
      /**
       * End Time
       * Format: date-time
       */
      end_time: string;
      /**
       * Reservable Id
       * @description Reservable ID
       */
      reservable_id: number;
    };
    /** LoginPostOut */
    LoginPostOut: {
      /** Token */
      token: string;
      /** Exp */
      exp: number;
    };
    /** LoginPostIn */
    LoginPostIn: {
      /** Username */
      username: string;
      /** Password */
      password: string;
    };
    /** ValidateSessionPostOut */
    ValidateSessionPostOut: {
      /** Is Valid */
      is_valid: boolean;
    };
    /** UserSchemaOut */
    UserSchemaOut: {
      /** Id */
      id: number;
      /** Username */
      username: string;
      /** Email */
      email: string;
      /** First Name */
      first_name: string;
      /** Last Name */
      last_name: string;
    };
    /** UserSchemaIn */
    UserSchemaIn: {
      /** Username */
      username: string;
      /** Password */
      password: string;
      /** Email */
      email: string;
      /** First Name */
      first_name: string;
      /** Last Name */
      last_name: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Get Reservables */
  reservation_reservables_controller_get_reservables: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ReservableSchemaOut"][];
        };
      };
    };
  };
  /** Post Reservable */
  reservation_reservables_controller_post_reservable: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReservableSchemaIn"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["ReservableSchemaOut"];
        };
      };
    };
  };
  /** Get Reservable By Id */
  reservation_reservables_controller_get_reservable_by_id: {
    parameters: {
      path: {
        reservable_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ReservableSchemaOut"];
        };
      };
    };
  };
  /** Delete Reservable */
  reservation_reservables_controller_delete_reservable: {
    parameters: {
      path: {
        reservable_id: number;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
    };
  };
  /** Patch Reservable */
  reservation_reservables_controller_patch_reservable: {
    parameters: {
      path: {
        reservable_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReservableSchemaPatchIn"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ReservableSchemaOut"];
        };
      };
    };
  };
  /** Get Reservation */
  reservation_reservation_controller_get_reservation: {
    parameters: {
      query?: {
        day?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ReservationSchemaOut"][];
        };
      };
    };
  };
  /** Post Reservation */
  reservation_reservation_controller_post_reservation: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReservationSchemaIn"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["ReservationSchemaOut"];
        };
      };
    };
  };
  /** Get Reservation By User */
  reservation_reservation_controller_get_reservation_by_user: {
    parameters: {
      query?: {
        day?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ReservationSchemaOut"][];
        };
      };
    };
  };
  /** Get Reservation By Id */
  reservation_reservation_controller_get_reservation_by_id: {
    parameters: {
      path: {
        reservation_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ReservationSchemaOut"];
        };
      };
    };
  };
  /** Delete Reservation */
  reservation_reservation_controller_delete_reservation: {
    parameters: {
      path: {
        reservation_id: number;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
    };
  };
  /**
   * Post Login
   * @description This is a function to login a user.
   *
   * When a user is logged in, a token is created.
   *
   * :param username: The username of the user.
   *
   * :param password: The password of the user.
   *
   * :return token: The token of the user.
   *
   * :return exp: The time when the token expires in epoch
   */
  authentication_authsession_controller_post_login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginPostIn"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["LoginPostOut"];
        };
      };
    };
  };
  /**
   * Post Logout
   * @description This is a function to logout a user.
   *
   * When a user is logged out all the auth sessions are deleted.
   *
   * :param token: The token of the user.
   *
   * :return: True if the user is logged out.
   */
  authentication_authsession_controller_post_logout: {
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
    };
  };
  /**
   * Post Validate Session
   * @description     Check if the session is valid using token.
   *
   *     checking will not refresh session expiry time.
   * .
   */
  authentication_authsession_controller_post_validate_session: {
    parameters: {
      query: {
        token: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ValidateSessionPostOut"];
        };
      };
    };
  };
  /**
   * Register
   * @description This is a function to register a user.
   *
   * :param username: The username of the user.
   *
   * :param password: The password of the user.
   *
   * :param email: The email of the user.
   *
   * :param first_name: The first name of the user.
   *
   * :param last_name: The last name of the user.
   *
   * :return: The user that is created.
   */
  authentication_user_controller_register: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserSchemaIn"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserSchemaOut"];
        };
      };
    };
  };
  /**
   * Me
   * @description This is a function to get the current user.
   *
   * :return: The current user.
   */
  authentication_user_controller_me: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserSchemaOut"];
        };
      };
    };
  };
}
